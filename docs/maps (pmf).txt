PMF - PlatinumSrc Map File/Format

- .pmf file extension
- Current version is 0.0
- All data should be little endian
- LZ4F should be used for compression

Format:

    <Header> <Data>

    Header:
        <char[3]: {'P', 'M', 'F'}>
        <u8: Major version>
        <u64: Creation time (the time at which the map finished compiling in UTC Unix seconds)>
        <<char[1...]: {..., 0}>: Name>
        <<char[1...]: {..., 0}>: Description>
        <<char[1...]: {..., 0}>: Authors>
        <<char[1...]: {..., 0}>: Compiler info>
        <<u8: 0..32>: Gamemode count> [<char[2..16]: {..., 0}>: Gamemode name]...
    Data:
        <u32: String table size> <char[]: String table>
        <u32: Size of embedded resource archive> [Embedded resource PAF archive (See 'archives (paf).txt')]
        <u16: Extension count> [u32: Size of extension]... [Extension]...
        <u8: Level count> [u32: Level data size]... [Level data]...
        <u32: Entity count> [Entity (see 'map entities.txt')]...

        Level data:
            <u8:
                <5 bits: 0>
                <1 bit: Keep player velocity>
                <1 bit: Keep player chunk offset>
                <1 bit: Keep player in-chunk offset>
            >
            <u32: Size of compressed <Common level data>>
            <u32: Size of compressed <Client level data>>
            <u32: Size of compressed <Server level data>>
            <u32: Size of decompressed <Common level data>>
            <u32: Size of decompressed <Client level data>>
            <u32: Size of decompressed <Server level data>>
            <Compressed <Common level data>>
            <Compressed <Client level data>>
            <Compressed <Server level data>>
            <u32:
                <8 bits: Chunk Y count minus 1>
                <12 bits: Chunk X count minus 1>
                <12 bits: Chunk Z count minus 1>
            >
            <u8: Chunk size (2^n)>
            <<Chunk index>: Center chunk>
            <
                <u32: Size of compressed <Common chunk data>>
                <u32: Size of compressed <Client chunk data>>
                <u32: Size of compressed <Server chunk data>>
                <u32: Size of decompressed <Common chunk data>>
                <u32: Size of decompressed <Client chunk data>>
                <u32: Size of decompressed <Server chunk data>>
                (ordered by [Y][X][Z])
            >...
            <
                <Compressed <Common chunk data>>
                <Compressed <Client chunk data>>
                <Compressed <Server chunk data>>
                (ordered by [Y][X][Z])
            >...

        Chunk index:
            <u32:
                <8 bits: Chunk Y>
                <12 bits: Chunk X>
                <12 bits: Chunk Z>
            >

        Common level data:
            <u32: String table size> <char[]: String table>
            <u16: Material count> [Material]...
            <u16: Physics material count> [Physics material]...
            <u16: Sound material count> [Sound material]...
            <<String>: Air physics material>
            <u8: Weather environment count> [Weather environment]...
            <u8: Gravity environment count> [Gravity environment]...
            <<String>: Default weather environment>
            <<String>: Default gravity environment>
        Client level data:
            <u32: String table size> <char[]: String table>
            <u8: Sound environment count> [Sound environment]...
            <u8: Sky environment count> [Sky environment]...
            <<String>: Default sound environment>
            <<String>: Default sky environment>
            [Client-side material]...
        Server level data:
            <u32: String table size> <char[]: String table>
            <u32: Entity count> [Entity (see 'map entities.txt')]...

        Sound environment:
            <<String>: Name>
            <float: Low pass filter>
            <float: High pass filter>
            <float: Reverb delay>
            <float: Reverb feedback>
            <float: Reverb mix>
            <float: Reverb low pass filter>
            <float: Reverb high pass filter>
        Weather environment:
            <<String>: Name>
            <float[3]: XYZ wind direction and velocity>
            <u32: Wind direction random seed>
            <float[3]: XYZ wind direction randomness>
            <float: Wind direction noise speed>
            <u32: Wind velocity random seed>
            <float: Wind velocity randomness>
            <float: Wind velocity noise speed>
        Sky environment:
            <<String>: Name>
            <u8:
                <7 bits: 0>
                <1 bit: 3D skybox>
            >
            <<String>: +X skybox material>
            <<String>: +Y skybox material>
            <<String>: +Z skybox material>
            <<String>: -X skybox material>
            <<String>: -Y skybox material>
            <<String>: -Z skybox material>
            <<String>: Top cloud layer material>
            <<String>: Bottom cloud layer material>
            <<Chunk index>: 3D skybox chunk>
        Gravity environment:
            <<String>: Name>
            <float[3]: XYZ gravity>

        Common chunk data:
            <u32: String table size> <char[]: String table>
            <u8: Used material count> [<String>: Material name]...
            <u8: Used physics material count> [<String>: Physics material name]...
            <u8: Used sound material count> [<String>: Sound material name]...
            <u8: Weather environment region count> [<Environment region>: Weather environment region]...
            <u8: Gravity environment region count> [<Environment region>: Gravity environment region]...
            <u8: Dynamic light count> [Dynamic light]...
            <u8: Fast light count> [Fast light]...
            <u32: Cube count (must be at least 1)> <Cube>...
        Client chunk data:
            <u8: Sound environment region count> [<Environment region>: Sound environment region]...
            <u8: Sky environment region count> [<Environment region>: Sky environment region]...
            <u8: Lightmap count> [Lightmap]...
            <u32: Vertex count> [Vertex]...
            [Client-side dynamic light]...
            [Client-side fast light]...
            [Client-side cube]...
        Server chunk data:
            <u32: String table size> <char[]: String table>
            <u8: Region count> [Region]...
            [Server-side cube]...
            <u32: Entity count> [Entity (see 'map entities.txt')]...

        Region:
            <float[3]: (+X, +Y, +Z) corner>
            <float[3]: (-X, -Y, -Z) corner>
            <u32: Other active chunk count> [Chunk index]...

        Environment region:
            <float[3]: (+X, +Y, +Z) corner offset>
            <float[3]: (-X, +Y, +Z) corner offset>
            <float[3]: (+X, +Y, -Z) corner offset>
            <float[3]: (-X, +Y, -Z) corner offset>
            <float[3]: (+X, -Y, +Z) corner offset>
            <float[3]: (-X, -Y, +Z) corner offset>
            <float[3]: (+X, -Y, -Z) corner offset>
            <float[3]: (-X, -Y, -Z) corner offset>
            <<String>: Environment name>

        Material:
            <<String>: Name>
            <<String>: Type>
            <u8:
                <6 bits: 0>
                <1 bit: Liquid>
                <1 bit: Transparent>
            >
            <u8: 
                { ENTMAT_RENDMODE_NORMAL
                | ENTMAT_RENDMODE_ADD }
            >
        Client-side material:
            <<String>: Texture (untextured if empty)>
            <u8: Extra texture count> [<String>: Extra texture]...
            <u32: Texture advance time in microseconds>
            <float[2]: Texture UV scroll>
            <u8[3]: RGB color>
            <u8: Alpha (ignored if 'transparent' bit is not set)>
            <u8[3]: RGB emission>
            <u8: Shading>
            <u8: Shine>
            <<String>: Matcap texture>
            <Wave info (ignored if 'liquid' bit is not set)
                <float[3]: Velocity>
                <float: Wind influence>
                <float: Offset>
                <float: Scale>
            >

        Physics material:
            <<String>: Name>
            <u8:
                <7 bits: 0>
                <1 bit: Not solid>
            >
            <float: Friction (if 'not solid' bit is not set) or max speed (if 'not solid' bit is set)>
            <float: Traction (ignored if 'not solid' bit is set)>
            <float: Bounce (ignored if 'not solid' bit is set)>
            <float: Minimum speed to cause damage>
            <float: Base damage>
            <float: Extra damage per meter per second>

        Sound material:
            <float: Volume dampening>
            <float: Frequency dampening>

        Lightmap:
            <u8: 2^(n) size>
            <u8[3]: RGB luxel>...

        Vertex:
            <float[3]: XYZ>
            <float[2]: Texture UV>
            <float[2]: Lightmap UV>

        Dynamic light:
            <u8:
                <6 bits: 0>
                <1 bit: Preserve>
                <1 bit: Enabled>
            >
            <u32: Global ID>
        Client-side dynamic light:
            <u8[3]: RGB color>
            <u8: Affected lightmap count>
            <
                <u8: Lightmap>
                <u8[3]: RGB luxel>...
            >...

        Fast light:
            <u8:
                <6 bits: 0>
                <1 bit: Preserve>
                <1 bit: Enabled>
            >
            <u8: Initial intensity>
            <u32: Global ID>
        Client-side fast light:
            <u8[3]: RGB color>
            <u32: Range count>
            <
                <u32: Vertices to skip>
                <u32: Multiplier count> <u8: Multiplier>...
            >...

        Cube:
            <u8:
                <1 bit: Draw backfaces>
                <1 bit: Has pathfinding data>
                <1 bit: Has lighting data>
                <1 bit: Has visibility data>
                <4 bits: { PMF_CUBE_EMPTY | PMF_CUBE_PARENT | PMF_CUBE_GEOMETRY | PMF_CUBE_EXTGEOMETRY }>
            >
            [Cube visibility data]
            [ { <Parent cube data> | <Geometry cube data> | <Extended geometry cube data> } ]
        Client-side cube:
            [Cube lighting data]
            [ { <Client-side geometry cube data> | <Client-side extended geometry cube data> } ]
        Server-side cube:
            [Cube pathfinding data]

        Parent cube data:
            <u8:
                <1 bit: Has (-X, -Y, -Z) child> <1 bit: Has (+X, -Y, -Z) child>
                <1 bit: Has (-X, -Y, +Z) child> <1 bit: Has (+X, -Y, +Z) child>
                <1 bit: Has (-X, +Y, -Z) child> <1 bit: Has (+X, +Y, -Z) child>
                <1 bit: Has (-X, +Y, +Z) child> <1 bit: Has (+X, +Y, +Z) child>
            >
            [u32: (+X, +Y, +Z) child index] [u32: (-X, +Y, +Z) child index]
            [u32: (+X, +Y, -Z) child index] [u32: (-X, +Y, -Z) child index]
            [u32: (+X, -Y, +Z) child index] [u32: (-X, -Y, +Z) child index]
            [u32: (+X, -Y, -Z) child index] [u32: (-X, -Y, -Z) child index]

        Geometry cube data:
            <u8: Material>
            <u8: Physics material>
            <u8: Sound material>
        Client-side geometry cube data:
            <u8: Lightmap>
            <u8:
                <2 bits: 0>
                <1 bit: -Z has face> <1 bit: -Y has face> <1 bit: -X has face>
                <1 bit: +Z has face> <1 bit: +Y has face> <1 bit: +X has face>
            >
            <u32: Index of first quad's first vertex>

        Extended geometry cube data:
            <u8: +X material> <u8: +Y material> <u8: +Z material>
            <u8: -X material> <u8: -Y material> <u8: -Z material>
            <u8: +X physics material> <u8: +Y physics material> <u8: +Z physics material>
            <u8: -X physics material> <u8: -Y physics material> <u8: -Z physics material>
            <u8: Sound material>
            <u8:
                <1 bit: (-X, -Y, -Z) point is moved> <1 bit: (+X, -Y, -Z) point is moved>
                <1 bit: (-X, -Y, +Z) point is moved> <1 bit: (+X, -Y, +Z) point is moved>
                <1 bit: (-X, +Y, -Z) point is moved> <1 bit: (+X, +Y, -Z) point is moved>
                <1 bit: (-X, +Y, +Z) point is moved> <1 bit: (+X, +Y, +Z) point is moved>
            >
            [float[3]: (+X, +Y, +Z) XYZ] [float[3]: (-X, +Y, +Z) XYZ]
            [float[3]: (+X, +Y, -Z) XYZ] [float[3]: (-X, +Y, -Z) XYZ]
            [float[3]: (+X, -Y, +Z) XYZ] [float[3]: (-X, -Y, +Z) XYZ]
            [float[3]: (+X, -Y, -Z) XYZ] [float[3]: (-X, -Y, -Z) XYZ]
        Client-side extended geometry cube data:
            <u8: +X lightmap> <u8: +Y lightmap> <u8: +Z lightmap>
            <u8: -X lightmap> <u8: -Y lightmap> <u8: -Z lightmap>
            <u8: +X # of triangles> <u8: +Y # of triangles> <u8: +Z # of triangles>
            <u8: -X # of triangles> <u8: -Y # of triangles> <u8: -Z # of triangles>
            <u32: Index of first triangle's first vertex>

        Cube visibility data:
            <u32: Other visible cube count>
            [u32: Visible cube index]...
            <u32: Other visible chunk count>
            [
                <Chunk index>
                <u32: Visible cube count (0 means all)> [u32: Cube index]...
            ]...

        Cube lighting data:
            <u8[3]: Base light>
            <u8: Dynamic light count> [ <u8: Dynamic light index> <u8: Multiplier> ]...
            <u8: Fast light count> [ <u8: Fast light index> <u8: Multiplier> ]...

        Cube pathfinding data:
            <u8: Attribute count> [ <<String>: Attribute name> <float[3]: XYZ direction to face> ]...

        String:
            <u32: Offset in respective string table>

        Extension:
            (See 'map extensions.txt')
            <u8:
                <6 bits: 0>
                <1 bit: Support required>
                <1 bit: Use in CRC>
            >
            <<char[2...]: {..., 0}>: Name>
            <u8[]: Data>


